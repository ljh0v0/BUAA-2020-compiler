<加法运算符> ::= +｜-
<加法运算符> ::= [PLUS]|[MINU]
FIRST PLUS MINU


<乘法运算符>  ::= *｜/
<乘法运算符>  ::= [MULT]|[DIV]
FIRST MULT DIV


<关系运算符>  ::=  <｜<=｜>｜>=｜!=｜==
<关系运算符>  ::=  [LSS]｜[LEQ]｜[GRE]｜[GEQ]｜[NEQ]｜[EQL]
FIRST LSS LEQ GRE GEQ NEQ EQL


<字符>  ::=  '<加法运算符>'｜'<乘法运算符>'｜'<字母>'｜'<数字>'
<字符>    ::=  [CHARCON]
FIRST CHARCON


<字符串>   ::=  "｛十进制编码为32,33,35-126的ASCII字符｝"
<字符串>   ::=  [STRCON]
FIRST  STRCON


<程序>    ::= ［<常量说明>］［<变量说明>］{<有返回值函数定义>|<无返回值函数定义>}<主函数>
<程序>    ::= ［<常量说明>］［<变量说明>］{ <有返回值函数定义> | <无返回值函数定义> } <主函数>
FIRST CONSTTK INTTK CHARTK INTTK CHARTK常量说明 VOIDTK VOIDTK


<常量说明> ::=  const<常量定义>;{ const<常量定义>;}
<常量说明> ::=  [CONSTTK] <常量定义> [SEMICN ] {[CONSTTK]<常量定义>[SEMICN]}
FIRST CONSTTK


<常量定义>   ::=   int<标识符>＝<整数>{,<标识符>＝<整数>} | char<标识符>＝<字符>{,<标识符>＝<字符>}
<常量定义>  ::=  [INTTK]<标识符>[ASSIGN]<整数> {[COMMA]<标识符>[ASSIGN]<整数>} |[CHARTK]<标识符>[ASSIGN]<字符> {[COMMA]<标识符>[ASSIGN]<字符>}
FIRST INTTK CHARTK


<无符号整数>  ::= <数字>｛<数字>｝
<无符号整数>  ::= [INTCON]
FIRST INTCON


<整数>        ::= ［＋｜－］<无符号整数>
<整数>      ::= ［[PLUS]|[MINE]］<无符号整数>
FIRST PLUS MINU INTCON


<标识符>    ::=  <字母>｛<字母>｜<数字>｝
<标识符>    ::=  [IDENFR]
FIRST IDENFR


<声明头部>   ::=  int<标识符> |char<标识符>
<声明头部>   ::=  [INTTK]<标识符> | [CHARTK]<标识符>
FIRST INTTK CHARTK



<常量>   ::=  <整数>|<字符>
<常量>   ::=  <整数>|<字符>
FIRST PLUS MINU INTCON CHARCON



<变量说明>  ::= <变量定义>;{<变量定义>;}
<变量说明>  ::= <变量定义>[SEMICN] {<变量定义>[SEMICN]}
FIRST INTTK CHARTK


<变量定义> ::= <变量定义无初始化>|<变量定义及初始化>
<变量定义> ::= <变量定义无初始化> | <变量定义及初始化>
FIRST INTTK CHARTK


<变量定义无初始化>  ::= <类型标识符>(<标识符>|<标识符>'['<无符号整数>']'|<标识符>'['<无符号整数>']''['<无符号整数>']'){,(<标识符>|<标识符>'['<无符号整数>']'|<标识符>'['<无符号整数>']''['<无符号整数>']' )}
<变量定义无初始化>  ::= <类型标识符><标识符>( <空> |(LBRACK]<无符号整数>[RBRACK](< 空> | [LBRACK]<无符号整数>[RBRACK]))){[COMMA]<标识符>(<空> |([LBRACK]<无符号整数>([RBRACK] |[RBRACK][LBRACK]<无符号整数>[RBRACK])))}
FIRST INTTK CHARTK


<变量定义及初始化>  ::= <类型标识符><标识符>=<常量>|<类型标识符><标识符>'['<无符号整数>']'='{'<常量>{,<常量>}'}'|<类型标识符><标识符>'['<无符号整数>']''['<无符号整数>']'='{''{'<常量>{,<常量>}'}'{, '{'<常量>{,<常量>}'}'}'}'
<变量定义及初始化>  ::=  <类型标识符><标识符>([ASSIGN]<常量> |[LBRACK]<无符号整数> [RBRACK]([ASSIGN][LBRACE]<常量> {[COMMA]<常量>}[RBRACE]|[LBRACK]<无符号整数>[RBRACK][ASSIGN][LBRACE][LBRACE]<常量> {[COMMA]<常量>}[RBRACE]{[COMMA] [LBRACE]<常量>{[COMMA]<常量>}[RBRACE]}[RBRACE]))
FIRST INTTK CHARTK



<类型标识符>      ::=  int | char
<类型标识符>      ::=  [INTTK] | [CHARTK]
FIRST INTTK CHARTK



<有返回值函数定义>  ::=  <声明头部>'('<参数表>')' '{'<复合语句>'}'
<有返回值函数定义>  ::=  <声明头部>[LPARENT]<参数表>[RPARENT] [LBRACE]<复合语句>[RBRACE]
FIRST INTTK CHARTK



<无返回值函数定义>  ::= void<标识符>'('<参数表>')''{'<复合语句>'}'
<无返回值函数定义>  ::= [VOIDTK]<标识符>[LPARENT]<参数表>[RPARENT][LBRACE]<复合语句>[RBRACE]
FIRST VOIDTK



<复合语句>   ::=  ［<常量说明>］［<变量说明>］<语句列>
<复合语句>    ::=  ［<常量说明>］［<变量说明>］<语句列>
FIRST CONSTTK INTTK CHARTK WHILETK FORTK IFTK IDENFR IDENFR IDENFR SCANFTK PRINTFTK SWITCHTK SEMICN RETURNTK LBRACE <空>



<参数表>    ::=  <类型标识符><标识符>{,<类型标识符><标识符>}| <空>
<参数表>    ::= <类型标识符><标识符>{[COMMA]<类型标识符><标识符>} |<空>
FIRST INTTK CHARTK EMPTY



<主函数>    ::= void main‘(’‘)’ ‘{’<复合语句>‘}’
<主函数>    ::= [VOIDTK] [MAINTK][LPARENT][RPARENT] [LBRACE]<复合语句>[RBRACE]
FIRST VOIDTK



<表达式>    ::= ［＋｜－］<项>{<加法运算符><项>}
<表达式>    ::= ［[PLUS] | [MINU]］<项> {<加法运算符><项>}
FIRST PLUS MINU IDENFR LPARENT PLUS MINU INTCON CHARCON IDENFR



<项>     ::= <因子>{<乘法运算符><因子>}
<项>        ::= <因子> { <乘法运算符><因子> }
FIRST IDENFR LPARENT PLUS MINU INTCON CHARCON IDENFR



<因子>    ::= <标识符>｜<标识符>'['<表达式>']'|<标识符>'['<表达式>']''['<表达式>']'|'('<表达式>')'｜<整数>|<字符>｜<有返回值函数调用语句>

<因子>     ::=  <标识符> (<空> | [LBRACK]<表达式>[RBRACK] | [LBRACK]<表达式>[RBRACK][LBRACK]<表达式>[RBRACK]) |[LPARENT]<表达式>[RPARENT] |<整数> |<字符> |<有返回值函数调用语句>

FIRST IDENFR LPARENT PLUS MINU INTCON CHARCON IDENFR




<语句>    ::= <循环语句>｜<条件语句>| <有返回值函数调用语句>;  |<无返回值函数调用语句>;｜<赋值语句>;｜<读语句>;｜<写语句>;｜<情况语句>｜<空>;|<返回语句>; | '{'<语句列>'}'

<语句>      ::= <循环语句> |<条件语句> |<有返回值函数调用语句> [SEMICN]  |<无返回值函数调用语句> [SEMICN] |<赋值语句> [SEMICN] |<读语句> [SEMICN] |<写语句> [SEMICN] |<情况语句> |<空> [SEMICN] |<返回语句> [SEMICN] |[LBRACE] <语句列> [RBRACE]

FIRST WHILETK FORTK IFTK IDENFR IDENFR IDENFR SCANFTK PRINTFTK SWITCHTK SEMICN RETURNTK LBRACE




<赋值语句>   ::=  <标识符>＝<表达式>|<标识符>'['<表达式>']'=<表达式>|<标识符>'['<表达式>']''['<表达式>']' =<表达式>
<赋值语句>  ::=  <标识符>[ASSIGN]<表达式>|<标识符>[LBRACK]<表达式>[RBRACK][ASSIGN]<表达式>|<标识符>[LBRACK]<表达式>[RBRACK][LBRACK]<表达式>[RBRACK] [ASSIGN]<表达式>

FIRST IDENFR



<条件语句>  ::= if '('<条件>')'<语句>［else<语句>］
<条件语句>  ::= [IFTK] [LPARENT]<条件>[RPARENT]<语句>［[ELSETK]<语句>］

FIRST IFTK



<条件>    ::=  <表达式><关系运算符><表达式>
<条件>    ::=  <表达式><关系运算符><表达式>

FIRST PLUS MINU IDENFR LPARENT PLUS MINU INTCON CHARCON IDENFR



<循环语句>   ::=  while '('<条件>')'<语句>| for'('<标识符>＝<表达式>;<条件>;<标识符>＝<标识符>(+|-)<步长>')'<语句>

<循环语句>   ::=  [WHILETK] [LPARENT]<条件>[RPARENT]<语句>|[FORTK][LPARENT]<标识符>[ASSIGN]<表达式>[SEMICN]<条件>[SEMICN]<标识符> [ASSIGN]<标识符>([PLUS]|[MINU])<步长>[RPARENT]<语句>

FIRST WHILETK FORTK



<步长>::= <无符号整数>
<步长>::= <无符号整数>

FIRST INTCON



<情况语句>  ::=  switch ‘(’<表达式>‘)’ ‘{’<情况表><缺省>‘}’
<情况语句>  ::=  [SWITCHTK] [LPARENT]<表达式>[RPARENT] [LBRACE]<情况表><缺省>[RBRACE]

FIRST SWITCHTK



<情况表>   ::=  <情况子语句>{<情况子语句>}
<情况表>   ::=  <情况子语句>{<情况子语句>}

FIRST CASETK



<情况子语句>  ::=  case<常量>：<语句>
<情况子语句>  ::=  [CASETK]<常量>[COLON]<语句>

FIRST CASETK



<缺省>   ::=  default :<语句>
<缺省>   ::=  [DEFAULTTK] [COLON] <语句>

FIRST DEFAULTTK



<有返回值函数调用语句> ::= <标识符>'('<值参数表>')'
<有返回值函数调用语句> ::=<标识符>[LPARENT]<值参数表>[RPARENT]

FIRST IDENFR



<无返回值函数调用语句> ::= <标识符>'('<值参数表>')'
<无返回值函数调用语句> ::=<标识符>[LPARENT]<值参数表>[RPARENT]

FIRST IDENFR



<值参数表>   ::= <表达式>{,<表达式>}｜<空>
<值参数表>   ::= <表达式> {[COMMA]<表达式>}|<空>

FIRST PLUS MINU IDENFR LPARENT PLUS MINU INTCON CHARCON IDENFR



<语句列>   ::= ｛<语句>｝
<语句列>   ::= ｛<语句>｝

FIRST WHILETK FORTK IFTK IDENFR IDENFR IDENFR SCANFTK PRINTFTK SWITCHTK SEMICN RETURNTK LBRACE <空>



<读语句>    ::=  scanf '('<标识符>')'
<读语句>    ::=  [SCANFTK] [LPARENT]<标识符> [RPARENT]

FIRST SCANFTK



<写语句>    ::= printf '(' <字符串>,<表达式> ')'| printf '('<字符串> ')'| printf '('<表达式>')'
<写语句>    ::= [PRINTFTK] [LPARENT] ( <字符串>[COMMA]<表达式> [RPARENT] | <字符串> [RPARENT] | <表达式>[RPARENT] )

FIRST PRINTFTK



<返回语句>   ::=  return['('<表达式>')']
<返回语句>   ::=  [RETURNTK] [ [LPARENT] <表达式> [RPARENT] ]

FIRST RETURNTK
